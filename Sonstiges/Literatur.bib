
@book{coughlan_beginning_2014,
	location = {Berkeley, California?},
	title = {Beginning {COBOL} for programmers},
	isbn = {978-1-4302-6253-4},
	series = {The expert's voice in {COBOL}},
	abstract = {Beginning {COBOL} for Programmersis a comprehensive,sophisticated tutorial and modular skills referenceon the {COBOL} programming language for established programmers. This book is for you if you are a developer who would like to - or must - add {COBOL} to your repertoire. Perhaps you recognize the opportunities presented by the current {COBOL} skills crisis, or you may be working in a mission critical enterprise which retains legacy {COBOL} applications. Whatever your situation,Beginning {COBOL} for Programmers meets your needs as an established programmer moving to {COBOL}. Beginning {COBOL} for Programmersincludes coverage of the latest {COBOL} featuresand techniques, including control structures, tabular data, sequential files, procedure divisions, string handling, decimal arithmetic, report writer, object-{orientedCOBOL}, and more.You'll receive extensive introductions to the core features of the {COBOL} language, and then find solutions about how to effectively deploy {COBOL} to build robust mission critical enterprise applications that talk to legacy enterprise applications or aspects of those applications. If you've inherited some legacy {COBOL}, you'll be able to grasp the {COBOL} idioms and recognize what's happening in the code you're working with. The death of {COBOL} has been predicted time and time again, yet {COBOL} still remains a dominant force at the heart of enterprise computing.In 1997, the Gartner group estimated that of the 300 billion lines of code in the world, 240 billion (80\%) were written in {COBOL}, and that dominance is not greatly changed today.But there is a crisis on the horizon.While the number of {COBOL} programmers reaching retirement age has created a growing shortage, attempts to rewrite {COBOL} legacy systems in a more fashionable language have oftennot been successful or put aside for a number of reasons. Therefore, today's enterprise application developers - mostly skilled at C++, C\# and Java - can find {COBOL} skills open new - or old - doors, and this handy reliable reference is a book that you can turn to for your {COBOL} skills--},
	pagetotal = {556},
	publisher = {Apress},
	author = {Coughlan, Michael},
	date = {2014},
	note = {{OCLC}: ocn874119151},
	keywords = {{COBOL} (Computer program language), Computer science}
}

@misc{rehn_tutorials_2009,
	title = {Tutorials schreiben oder: Wenn sich Programmierer in Prosa versuchen},
	url = {http://www.christian-rehn.de/wp-content/uploads/2009/09/tutorials2.pdf},
	author = {Rehn, Christian},
	date = {2009-09-29}
}

@book{budlong_teach_1997,
	location = {Indianapolis, {IN}},
	edition = {2nd ed},
	title = {Teach yourself Cobol in 21 days},
	isbn = {978-0-672-31137-6},
	pagetotal = {1056},
	publisher = {Sams Pub},
	author = {Budlong, Mo},
	date = {1997},
	keywords = {{COBOL} (Computer program language)},
	file = {Teach Yourself Cobol In 21 Days (2nd Ed).pdf:/home/toni/Zotero/storage/36CM7L4L/Teach Yourself Cobol In 21 Days (2nd Ed).pdf:application/pdf}
}

@book{rozanski_cobol_2004,
	location = {Bonn},
	edition = {1. Aufl},
	title = {Cobol 2002 ge-packt},
	isbn = {978-3-8266-1363-0},
	series = {Die ge-packte Referenz},
	shorttitle = {Cobol 2002 ge-packt},
	abstract = {schnelles und effektives Nachschlagen aller Klauseln und Anweisungen ; objektorientiertes und klassisches Cobol ; Verarbeitung von {XML}-Dateien und Intrinsic-Funktionen},
	pagetotal = {492},
	publisher = {mitp-Verl},
	author = {Rozanski, Uwe},
	date = {2004},
	note = {{OCLC}: 76681426},
	file = {Table of Contents PDF:/home/toni/Zotero/storage/4WBEVBAM/Rozanski - 2004 - Cobol 2002 ge-packt schnelles und effektives Nach.pdf:application/pdf}
}

@book{byrne_java_2009,
	location = {Boston, {MA}},
	title = {Java for {COBOL} programmers},
	isbn = {978-1-58450-618-8},
	url = {http://public.eblib.com/choice/publicfullrecord.aspx?p=3136100},
	publisher = {Charles River Media},
	author = {Byrne, John C and Cross, Jim},
	date = {2009},
	note = {{OCLC}: 567983849}
}

@book{stern_cobol_2006,
	location = {Hoboken, {NJ}},
	edition = {11th ed},
	title = {{COBOL} for the 21st century},
	isbn = {978-0-471-72261-8},
	pagetotal = {1},
	publisher = {John Wiley \& Sons},
	author = {Stern, Nancy B. and Stern, Robert A. and Ley, James P.},
	date = {2006},
	keywords = {{COBOL} (Computer program language), Structured programming}
}

@misc{jia_walker_cobol_2004,
	title = {{COBOL} Programming Fundamental},
	url = {file:///home/toni/Downloads/COBOL_Programming_Fundamental.pdf},
	author = {{Jia Walker}},
	date = {2004-11},
	file = {COBOL_Programming_Fundamental.pdf:/home/toni/Downloads/COBOL_Programming_Fundamental.pdf:application/pdf}
}

@article{colvey_cobol_2009,
	title = {Cobol hits 50 and keeps counting},
	issn = {0261-3077},
	url = {http://www.theguardian.com/technology/2009/apr/09/cobol-internet-programming},
	abstract = {It is 50 years old this year, but Cobol is still a key player in behind-the-scenes business software},
	journaltitle = {The Guardian},
	author = {Colvey, Scott},
	urldate = {2017-12-14},
	date = {2009-04-08},
	langid = {british},
	keywords = {Computing, {IBM}, Programming, Technology},
	file = {Snapshot:/home/toni/Zotero/storage/H5783FZQ/cobol-internet-programming.html:text/html}
}

@online{kelly_cobol_2009,
	title = {Cobol â€“ still doing the business after 50 years},
	url = {https://www.ft.com/content/9c40ed12-569c-11de-9a1c-00144feabdc0},
	titleaddon = {Financial Times},
	author = {Kelly, Stephen},
	urldate = {2017-12-14},
	date = {2009-07-10},
	file = {Snapshot:/home/toni/Zotero/storage/XFAFBSU4/9c40ed12-569c-11de-9a1c-00144feabdc0.html:text/html}
}

@book{barbier_cobol_2014,
	location = {Hoboken, {NJ}},
	title = {Cobol software modernization},
	isbn = {978-1-84821-760-7},
	url = {http://file.allitebooks.com/20160118/COBOL%20Software%20Modernization.pdf},
	publisher = {{ISTE} Ltd/John Wiley and Sons Inc},
	author = {Barbier, Franck},
	date = {2014},
	file = {COBOL Software Modernization.pdf:/home/toni/Zotero/storage/VQS5XKTP/COBOL Software Modernization.pdf:application/pdf}
}

@book{doke_cobol_2005,
	location = {Cambridge; New York},
	title = {{COBOL} programmers swing with Java},
	isbn = {978-0-511-08240-5 978-0-511-08150-7 978-0-511-54698-3 978-0-521-83781-1 978-1-280-43206-4},
	url = {http://www.books24x7.com/marc.asp?isbn=0521546842},
	abstract = {In the fast moving world of information technology, Java is now the number 1 programming language. Programmers and developers everywhere need to know Java to keep pace with traditional and web-based application development. {COBOL} Programmers Swing with Java provides {COBOL} programmers a clear, easy transition to Java programming by drawing on the numerous similarities between {COBOL} and Java. The authors introduce the {COBOL} programmer to the history of Java and object-oriented programming and then dive into the details of the Java syntax, always contrasting them with their parallels in {COBOL}. A running case study gives the reader an overall view of application development with Java, with increased functionality as new material is presented. This new edition features the development of graphical user interfaces ({GUI}'s) using the latest in Java Swing components. The clear writing style and excellent examples make the book suitable for anyone wanting to learn Java and {OO} programming, whether they have a background in {COBOL} or not.},
	publisher = {Cambridge University Press},
	author = {Doke, E. Reed and Hardgrave, Bill C and Johnson, Richard A and Doke, E. Reed},
	urldate = {2018-01-31},
	date = {2005},
	note = {{OCLC}: 60573589}
}

@article{richards_enhancing_1984,
	title = {Enhancing Cobol program structure: sections vs. paragraphs},
	volume = {16},
	issn = {00978418},
	url = {http://portal.acm.org/citation.cfm?doid=989341.989353},
	doi = {10.1145/989341.989353},
	shorttitle = {Enhancing Cobol program structure},
	pages = {48--51},
	number = {2},
	journaltitle = {{ACM} {SIGCSE} Bulletin},
	author = {Richards, R. M.},
	urldate = {2018-03-13},
	date = {1984-06-01},
	langid = {english},
	file = {p48-richards.pdf:/home/toni/Zotero/storage/4X4QZIKH/p48-richards.pdf:application/pdf}
}

@book{gamma_design_1995,
	location = {Boston, {MA}, {USA}},
	title = {Design Patterns: Elements of Reusable Object-oriented Software},
	isbn = {978-0-201-63361-0},
	shorttitle = {Design Patterns},
	publisher = {Addison-Wesley Longman Publishing Co., Inc.},
	author = {Gamma, Erich and Helm, Richard and Johnson, Ralph and Vlissides, John},
	date = {1995}
}

@online{university_of_limerick,
	title = {{COBOL} programming - tutorials, lectures, exercises, examples},
	url = {http://www.csis.ul.ie/cobol/},
	author = {{University of Limerick; Department of Computer Science \& Information Systems}},
	urldate = {2018-04-14},
	file = {COBOL programming - tutorials, lectures, exercises, examples:/home/toni/Zotero/storage/CV886PG2/cobol.html:text/html}
}

@book{martin_clean_2008,
	location = {Upper Saddle River, {NJ}, {USA}},
	edition = {1},
	title = {Clean Code: A Handbook of Agile Software Craftsmanship},
	isbn = {978-0-13-235088-4},
	shorttitle = {Clean Code},
	abstract = {Even bad code can function. But if code isnt clean, it can bring a development organization to its knees. Every year, countless hours and significant resources are lost because of poorly written code. But it doesnt have to be that way.Noted software expert Robert C. Martin, presents a revolutionary paradigm with Clean Code: A Handbook of Agile Software Craftsmanship. Martin, who has helped bring agile principles from a practitioners point of view to tens of thousands of programmers, has teamed up with his colleagues from Object Mentor to distill their best agile practice of cleaning code on the fly into a book that will instill within you the values of software craftsman, and make you a better programmerbut only if you work at it.What kind of work will you be doing? Youll be reading codelots of code. And you will be challenged to think about whats right about that code, and whats wrong with it. More importantly you will be challenged to reassess your professional values and your commitment to your craft. Clean Code is divided into three parts. The first describes the principles, patterns, and practices of writing clean code. The second part consists of several case studies of increasing complexity. Each case study is an exercise in cleaning up codeof transforming a code base that has some problems into one that is sound and efficient. The third part is the payoff: a single chapter containing a list of heuristics and smells gathered while creating the case studies. The result is a knowledge base that describes the way we think when we write, read, and clean code.Readers will come away from this book {understandingHow} to tell the difference between good and bad {codeHow} to write good code and how to transform bad code into good {codeHow} to create good names, good functions, good objects, and good {classesHow} to format code for maximum readability How to implement complete error handling without obscuring code {logicHow} to unit test and practice test-driven {developmentWhat} smells and heuristics can help you identify bad {codeThis} book is a must for any developer, software engineer, project manager, team lead, or systems analyst with an interest in producing better code.},
	publisher = {Prentice Hall {PTR}},
	author = {Martin, Robert C.},
	date = {2008}
}